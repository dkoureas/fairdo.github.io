{"entries":[{"skip_index":true,"title":"Search results","url":"/search/","tags":[],"body":""},{"title":"","url":"/ISSUE_TEMPLATE.md","tags":[],"body":"## Summarize the issue in one sentence ## Tell us more about how we can help ## Details * Related links * Operating system and version (example: Windows 10 or Mac OS X 10.12.6) * Browser and version (example: Chrome, Internet Explorer, or Safari)"},{"skip_index":true,"title":"","url":"/assets/uswds/CONTRIBUTING.md","tags":[],"body":"## Welcome! We’re so glad you’re thinking about contributing to an 18F open source project! If you’re unsure about anything, just ask — or submit your issue or pull request anyway. The worst that can happen is we’ll politely ask you to change something. We appreciate all friendly contributions. One of our goals is to ensure a welcoming environment for all contributors to our projects. Our staff follows the [18F Code of Conduct](https://18f.gsa.gov/code-of-conduct/), and all contributors should do the same. We encourage you to read this project’s CONTRIBUTING policy (you are here), its [LICENSE](https://github.com/18F/web-design-standards/blob/develop/LICENSE.md), [README](https://github.com/18F/web-design-standards/blob/develop/README.md) and its [Workflow](https://github.com/18F/web-design-standards/wiki/Workflow) process. If you have any questions or want to read more, check out the [18F Open Source Policy GitHub repository]( https://github.com/18f/open-source-policy), or just [shoot us an email](mailto:18f@gsa.gov). ## Guidelines ### Contributor Guidelines for Design We have provided some guidelines for folks that would like to submit new components to the U.S. Web Design Standards and the lifecycle those new components will go through. For more detail, please visit the [guidelines on our wiki](https://github.com/18F/web-design-standards/wiki/Contribution-Guidelines:-Design). ### Submitting an issue To help us get a better understanding of the issue you’re submitting, follow our ISSUE TEMPLATE and the guidelines it describes. ### Submitting a pull request Here are a few guidelines to follow when submitting a pull request: 1. Create a GitHub account or sign in to your existing account. 1. Fork this repo into your GitHub account (or just clone it if you’re an 18F team member). Read more about forking a repo here on GitHub: [https://help.github.com/articles/fork-a-repo/](https://help.github.com/articles/fork-a-repo/) 1. Create a branch from `develop` that lightly defines what you’re working on (for example, add-styles). 1. Ensure that your contribution works via `npm`, if applicable. 1. Once you’re ready to submit a pull request, fill out the PULL REQUEST template provided. 1. Submit your pull request against the `develop` branch. [Open an issue](https://github.com/18F/web-design-standards/issues/new) if you have questions or need help with setup. ### Running locally The U.S. Web Design Standards `uswds` package (the zip download and the files needed to use the Standards on your project) is built primarily with two [Node.js] tools: [Fractal] and [Gulp]. Once you've cloned this repository, you'll need to install its dependencies: ```sh npm install ``` **ProTip**: You can also use [Yarn], which tends to install dependencies more quickly than npm. To start the [Fractal] live reload server, run: ```sh npm start ``` Then, visit [localhost:3000](http://localhost:3000) in a web browser to peruse the component library. While the server is running, any changes that you make to the component templates or configurations will reload the page automatically. If you're working on the JavaScript or CSS, you can run the \"watch\" task in another shell to automatically rebuild the distribution files that Fractal references with: ```sh npm run watch ``` ### Testing To run the component unit tests, run: ```sh npm test ``` This will also run [eslint] and [stylelint] to ensure that the JavaScript and SCSS source files meet our coding standards. To lint without the unit tests, you'll need [Gulp][]. Install it globally (`npm install -g gulp-cli`), then run: ```sh gulp eslint gulp stylelint ``` (Or, if you don't want to install Gulp globally, you can run `$(npm bin)/gulp` instead of `gulp`.) ### Building To build the `uswds` package in preparation for releases, run: ```sh npm run build:package # or gulp release ``` ## Coding guidelines The purpose of our coding styleguides are to create consistent coding practices across 18F. The styleguide should be treated as a guide — rules can be modified according to project needs. This project follows the 18F Front End Guide [CSS](https://pages.18f.gov/frontend/#css) and [JavaScript](https://pages.18f.gov/frontend/#javascript). Please use this guide for your reference. ### Code coverage We use [code coverage](https://en.wikipedia.org/wiki/Code_coverage) tools to understand how much of our JavaScript is tested by our [unit test suite](spec/unit). Code coverage is one way (among many) of measuring code _quality_ more generally. Here's how it works for contributions: 1. Each pull request creates a new coverage report on [Code Climate](https://codeclimate.com/). 1. Code Climate then posts a status message back to GitHub that lists the coverage percentage on that branch, and the difference between that number and the one last reported on our default branch. For JavaScript contributions, we will review the code coverage percentage and change to ensure that the quality of our code is not dramatically affected. High code coverage numbers are generally good, and we would prefer that our coverage increases over time. We will not categorically reject contributions that reduce code coverage, but we may ask contributors to refactor their code, add new unit tests, or modify existing tests to avoid significant reductions in coverage. ## Our use of branches See the [release documentation](RELEASE.md#release-process) for more information on our git/GitHub release workflow. ## Licenses and attribution ### A few parts of this project are not in the public domain For complete attribution and licensing information for parts of the project that are not in the public domain, see [LICENSE.md](https://github.com/18F/web-design-standards/blob/develop/LICENSE.md). ### The rest of this project is in the public domain The rest of this project is in the worldwide [public domain](https://github.com/18F/web-design-standards/blob/develop/LICENSE.md). This project is in the public domain within the United States, and copyright and related rights in the work worldwide are waived through the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/). ### Contributions will be released into the public domain All contributions to this project will be released under the CC0 dedication. By submitting a pull request, you are agreeing to comply with this waiver of copyright interest. [Node.js]: https://nodejs.org [Fractal]: http://fractal.build [Gulp]: http://gulpjs.com/ [Yarn]: https://yarnpkg.com/ [eslint]: http://eslint.org/ [stylelint]: https://stylelint.io/"},{"skip_index":true,"title":"","url":"/assets/uswds/LICENSE.md","tags":[],"body":"## A few parts of this project are not in the public domain ### Files licensed under the SIL Open Font License The Source Sans Pro font files in `src/fonts` are a customized subset of [Source Sans Pro](https://github.com/adobe-fonts/source-sans-pro), licensed under the [SIL Open Font License](http://scripts.sil.org/cms/scripts/page.php?item_id=OFL), and copyright [Adobe Systems Incorporated](http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe Systems Incorporated in the United States and/or other countries. The Merriweather font files in `src/fonts` are from [Google Web Fonts](https://www.google.com/fonts#UsePlace:use/Collection:Merriweather:400,300,400italic,700,700italic), licensed under the [SIL Open Font License](http://scripts.sil.org/cms/scripts/page.php?item_id=OFL), and copyright [Sorkin Type Co](www.sorkintype.com) with Reserved Font Name 'Merriweather'. The files in `src/img` are from [Font Awesome](http://fontawesome.io/) by Dave Gandy under the [SIL Open Font License 1.1](http://scripts.sil.org/OFL). ### Files licensed under the MIT license The files in `src/stylesheets/lib` are from: * [Bourbon](http://bourbon.io/), copyright [thoughtbot](https://thoughtbot.com/), inc., under the [MIT license](https://github.com/thoughtbot/neat/blob/master/LICENSE.md). * [Neat](http://neat.bourbon.io/), copyright [thoughtbot](https://thoughtbot.com/), inc., also under the [MIT license](https://github.com/thoughtbot/neat/blob/master/LICENSE.md). * [Normalize.css](https://github.com/necolas/normalize.css), copyright Nicolas Gallagher and Jonathan Neal, under the [MIT license](https://github.com/necolas/normalize.css/blob/master/LICENSE.md). The file `src/js/vendor/html5shiv.js` is from [HTML5 Shiv](https://github.com/afarkas/html5shiv), copyright Alexander Farkas (aFarkas), under the [MIT license](https://github.com/aFarkas/html5shiv/blob/master/MIT%20and%20GPL2%20licenses.md). The file `src/js/vendor/rem.min.js` is from [REM unit polyfill](https://github.com/chuckcarpenter/REM-unit-polyfill), copyright Chuck Carpenter, under the [MIT license](https://github.com/chuckcarpenter/REM-unit-polyfill/blob/master/LICENSE.md). The file `src/js/vendor/respond.js` is from [Respond.js](https://github.com/scottjehl/Respond), copyright Scott Jehl, under the [MIT license](https://github.com/scottjehl/Respond/blob/master/LICENSE-MIT). The file `src/js/vendor/selectivizr-min.js` is from [Selectivizr](http://selectivizr.com/), copyright Keith Clark, under the [MIT license](http://opensource.org/licenses/mit-license.php). #### Full license text for the MIT licensed files: ``` The MIT License (MIT) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` ## The rest of this project is in the worldwide public domain As a work of the United States government, this project is in the public domain within the United States. Additionally, we waive copyright and related rights in the work worldwide through the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/). ### CC0 1.0 Universal Summary This is a human-readable summary of the [Legal Code (read the full text)](https://creativecommons.org/publicdomain/zero/1.0/legalcode). #### No Copyright The person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law. You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission. #### Other Information In no way are the patent or trademark rights of any person affected by CC0, nor are the rights that other persons may have in the work or in how the work is used, such as publicity or privacy rights. Unless expressly stated otherwise, the person who associated a work with this deed makes no warranties about the work, and disclaims liability for all uses of the work, to the fullest extent permitted by applicable law. When using or citing the work, you should not imply endorsement by the author or the affirmer. ### Contributions to this project As stated in [CONTRIBUTING](CONTRIBUTING.md), all contributions to this project will be released under the CC0 dedication. By submitting a pull request, you are agreeing to comply with this waiver of copyright interest."},{"skip_index":true,"title":"","url":"/assets/uswds/README.md","tags":[],"body":"# U.S. Web Design Standards [![CircleCI Build Status](https://circleci.com/gh/18F/web-design-standards/tree/develop.svg?style=shield)](https://circleci.com/gh/18F/web-design-standards/tree/develop) [![Test Coverage](https://codeclimate.com/github/18F/web-design-standards/badges/coverage.svg)](https://codeclimate.com/github/18F/web-design-standards/coverage) The [U.S. Web Design Standards](https://standards.usa.gov) include a library of open source UI components and a visual style guide for U.S. federal government websites. This repository is for the Standards themselves. 18F maintains [another repository for the documentation and website](https://github.com/18F/web-design-standards-docs). To see the Standards and documentation on the web, visit [https://standards.usa.gov](https://standards.usa.gov). ## Contents * [Background](#background) * [Recent updates](#recent-updates) * [Getting started](#getting-started) * [Using the Standards](#using-the-standards) * [Download](#download) * [Install using `npm`](#install-using-npm) * [Importing assets](#importing-assets) * [Sass](#sass) * [JavaScript](#javascript) * [Use another framework or package manager](#use-another-framework-or-package-manager) * [Fractal](#fractal) * [Template compatibility](#template-compatibility) * [Need installation help?](#need-installation-help) * [Contributing to the code base](#contributing-to-the-codebase) * [Reuse of open-source style guides](#reuse-of-open-source-style-guides) * [Licenses and attribution](#licenses-and-attribution) ## Background The components and style guide of the U.S. Web Design Standards follow industry-standard web accessibility guidelines and use the best practices of existing style libraries and modern web design. The [U.S. Digital Service](https://www.whitehouse.gov/digital/united-states-digital-service) and [18F](https://18f.gsa.gov/) created and maintain the U.S. Web Design Standards for designers and developers. They are designed for use by government product teams who want to create beautiful, easy-to-use online experiences for the public. To learn more about the project, check out this [blog post](https://18f.gsa.gov/2015/09/28/web-design-standards/) and to view websites and applications check out our list [here](WHO_IS_USING_USWDS.md). ## Recent updates Information about the most recent release of the Standards can always be found in the [release history](https://github.com/18F/web-design-standards/releases). We include details about significant updates and any backwards incompatible changes along with a list of all changes. ## Getting started We’re glad you’d like to use the Standards — here’s how you can get started: * Designers: [Check out our Getting Started for Designers information](https://standards.usa.gov/getting-started/designers/). * [Design files of all the assets included in the Standards are available for download](https://github.com/18F/web-design-standards-assets/archive/master.zip). * Developers: [Follow the instructions in this README to get started.](#using-the-standards) * [CSS, JavaScript, image, and font files of all the assets on this site are available for download](https://github.com/18F/web-design-standards/releases/download/v1.0.0/uswds-1.0.0.zip). ## Using the Standards There are a few different ways to use the Standards within your project. Which one you choose depends on the needs of your project and how you are most comfortable working. Here are a few notes on what to consider when deciding which installation method to use: *Download the Standards if:* - You are not familiar with `npm` and package management. *Use the Standards `npm` package if:* - You are familiar with using `npm` and package management. - You would like to leverage Standards [Sass](#sass) files. ### Download 1. Download the [Standards zip file](https://github.com/18F/web-design-standards/releases/download/v1.0.0/uswds-1.0.0.zip) and open that file. After extracting the zip file you should see the following file and folder structure: ``` uswds-1.0.0/ ├── css/ │   ├── uswds.min.css.map │   ├── uswds.min.css │   └── uswds.css ├── fonts/ ├── html/ └── js/ ├── uswds.min.js.map ├── uswds.min.js └── uswds.js ``` 2. Copy these files and folders into a relevant place in your project's code base. Here is an example structure for how this might look: ``` example-project/ ├── assets/ │   ├── uswds-1.0.0/ │   ├── stylesheets/ │   ├── images/ │   └── javascript/ └── index.html ``` You'll notice in our example above that we also outline a `stylesheets`, `images` and `javascript` folder in your `assets` folder. These folders are to help organize any assets that are unique to your project. 3. To use the Standards on your project, you’ll need to reference the [CSS (*C*ascading *S*tyle *S*heets)](https://developer.mozilla.org/en-US/docs/Web/CSS) and JavaScript files in each HTML page or dynamic templates in your project. Here is an example of how to reference these assets in your `index.html` file: ```html My Example Project ``` We offer both files, the CSS and the JavaScript, in two versions — a minified version, and an un-minified one. (In the examples above, we are using the minified files.) Use the minified files in a production environment or to reduce the file size of your downloaded assets. And the un-minified files are better if you are in a development environment or would like to debug the CSS or JavaScript assets in the browser. And that’s it — you should now be able to copy our code samples into our `index.html` and start using the Standards. ### Install using npm `npm` is a package manager for Node based projects. The U.S. Web Design Standards maintains a [`uswds` package](https://www.npmjs.com/package/uswds) for you to utilize both the pre-compiled and compiled files on your project. 1. Install `Node/npm`. Below is a link to find the install method that coincides with your operating system: - Node v4.2.3+, [Installation guides](https://nodejs.org/en/download/) **Note for Windows users:** If you are using Windows and are unfamiliar with `Node` or `npm`, we recommend following [Team Treehouse's tutorial](http://blog.teamtreehouse.com/install-node-js-npm-windows) for more information. 2. Make sure you have installed it correctly: ```shell npm -v 3.10.8 # This line may vary depending on what version of Node you've installed. ``` 3. Create a `package.json` file. You can do this manually, but an easier method is to use the `npm init` command. This command will prompt you with a few questions to create your `package.json` file. 4. Add `uswds` to your project’s `package.json`: ```shell npm install --save uswds ``` The `uswds` module is now installed as a dependency. You can use the un-compiled files found in the `src/` or the compiled files in the `dist/` directory. ``` node_modules/uswds/ ├── dist/ │   ├── css/ │   ├── fonts/ │ ├── html/ │   ├── img/ │   ├── js/ └── src/    ├── fonts/    ├── img/    ├── js/    ├── stylesheets/    └── templates/ ``` #### Importing assets Since you are already using `npm`, the U.S. Web Design Standards team recommends leveraging the ability to write custom scripts. Here are some links to how we do this with our docs website using `npm` + [`gulp`](http://gulpjs.com/): [Link to `npm` scripts example in `web-design-standards-docs`](https://github.com/18F/web-design-standards-docs/blob/develop/package.json#L4) [Link to gulpfile.js example in `web-design-standards-docs`](https://github.com/18F/web-design-standards-docs/blob/develop/gulpfile.js) #### Sass The Standards are easily customizable using the power of [Sass (Syntactically Awesome Style Sheets)](http://sass-lang.com/). The main Sass (SCSS) source file is located here: ``` node_modules/uswds/src/stylesheets/uswds.scss ``` Global variables are defined in the `node_modules/uswds/src/stylesheets/core/_variables.scss` file. Custom theming can be done by copying the `_variables.scss` file into your own project’s Sass folder, changing applicable variable values, and importing it before `uswds.scss`. Below is an example of how you might setup your main Sass file to achieve this: ``` @import 'variables.scss' # Custom Sass variables file @import 'node_modules/uswds/src/stylesheets/uswds.scss'; ``` You can now use your copied version of `_variables.scss` to override any styles to create a more custom look and feel to your application. #### JavaScript `require('uswds')` will load all of the U.S. Web Design Standards’ JavaScript onto the page. Add this line to whatever initializer you use to load JavaScript into your application. ### Use another framework or package manager If you’re using another framework or package manager that doesn’t support `npm`, you can find the source files in this repository and use them in your project. Otherwise, we recommend that you follow the [download instructions](#download). Please note that the core team [isn’t responsible for all frameworks’ implementations](https://github.com/18F/web-design-standards/issues/877). If you’re interested in maintaining a package that helps us distribute the U.S. Web Design Standards, the project’s build system can help you create distribution bundles to use in your project. Please read our [contributing guidelines](CONTRIBUTING.md#building-the-project-locally-with--gulp-) to locally build distributions for your framework or package manager. ## Fractal We're using [Fractal](http://fractal.build) to generate an interactive component library for the Standards. You can run it locally after `npm install` with: ```sh npm start ``` Then, visit [http://localhost:3000/](http://localhost:3000/) to see the Standards in action. _**Optional**: To re-build when code changes are made, run the following command from the project directory in a separate terminal window:_ ```sh npm run watch ``` ### Template compatibility Many of our Fractal view templates are compatible with [Nunjucks](https://mozilla.github.io/nunjucks/) (for JavaScript/Node), [Jinja](http://jinja.pocoo.org/docs/2.9/) (Python), and [Twig](https://twig.sensiolabs.org/) (PHP) out of the box. Components that reference other components use a Fractal-specific `{% render %}` tag that will either need to be implemented in other environments or replaced with the appropriate `{% include %}` tags. ## Need installation help? Do you have questions or need help with setup? Did you run into any weird errors while following these instructions? Feel free to open an issue here: [https://github.com/18F/web-design-standards/issues](https://github.com/18F/web-design-standards/issues). You can also email us directly at uswebdesignstandards@gsa.gov. ## Contributing to the code base For complete instructions on how to contribute code, please read [CONTRIBUTING.md](CONTRIBUTING.md). These instructions also include guidance on how to set up your own copy of the Standards style guide website for development. If you would like to learn more about our workflow process, check out the [Workflow](https://github.com/18F/web-design-standards/wiki/Workflow) and [Label Glossary](https://github.com/18F/web-design-standards/wiki/Label-glossary) pages on the wiki. If you have questions or concerns about our contributing workflow, please contact us by [filing a GitHub issue](https://github.com/18F/web-design-standards/issues) or [emailing our team](mailto:uswebdesignstandards@gsa.gov). ## Reuse of open-source style guides Much of the guidance in the U.S. Web Design Standards leans on open source designs, code, and patterns from other civic and government organizations, including: * Consumer Financial Protection Bureau’s [Design Manual](https://cfpb.github.io/design-manual/) * U.S. Patent and Trademark Office’s [Design Patterns](http://uspto.github.io/designpatterns/) * Healthcare.gov [Style Guide](http://styleguide.healthcare.gov/) * UK’s Government Digital Service’s [UI Elements](http://govuk-elements.herokuapp.com/) * Code for America’s Chime [Styleguide](https://github.com/chimecms/chime-starter) * Pivotal Labs [Component Library](http://styleguide.cfapps.io/) ## Licenses and attribution A few parts of this project are not in the public domain. Attribution and licensing information for those parts are described in detail in [LICENSE.md](LICENSE.md). The rest of this project is in the worldwide public domain, released under the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/). ## Contributing All contributions to this project will be released under the CC0 dedication alongside the public domain portions of this project. For more information, see [CONTRIBUTING.md](CONTRIBUTING.md)."},{"title":"Not found (404)","url":"/404.html","tags":[],"body":"Sorry, we can’t find that page. If you entered the address manually, please check your spelling and try again. Were you looking for one of these pages? Home Examples Publications About If you have other questions, please contact us."},{"title":"History","url":"/about/history/","tags":[],"body":"The Digital Objects have been defined in early papers by R. Kahn and the work in various RDA groups, in particular in the RDA Data Foundation & Terminology WG. Initiativs such as C2CAMP and GEDE have taken up the work on DOs and exchanged ideas about impleementations and plans (for activities see here: https://github.com/GEDE-RDA-Europe/GEDE/tree/master/Digital-Objects). Intensive discussions during the last few months including colleagues from GOFAIR resulted in the knowledge that the DO Model needs to be extended by explicit semantics to meet the emerging criteria of the FAIR Maturity Indicator work and to make them machine actionable. An international workshop was held in Paris where the participants agreed to write an FDO Document that can be signed to form a broad community, to build a coordination group to organise the community and a technical expert group to advance the FDO specifications. Due to a few activities around EOSC and COVID this work got stuck and will be taken up again in 2021. This folder is meant to host from now on all documents related to the FAIR Digital Objects (FDO) and the FDO Framework specifying the requirements. Also in the case of FDOs we will maintain the openness which characterises the GEDE collaboration."},{"title":"About","url":"/about/","tags":[],"body":"The FAIR Digital Object is a Digital Object (DO) (DO as defined by Robert Kahn in the early 1990s) that brings together the idea of interoperable digital objects and FAIR principles together. FAIR Digital Objects can represent data, software, protocols or other research resources. They are accompanied by persistent identifiers (PID) and metadata rich enough to enable them to be reliably found, used and cited (FAIR Implementation Report, Wittenburg & Strawn 2019). About the site This site launched in 2021."},{"title":"Examples","url":"/examples/","tags":[],"body":"The concept of Digital Object (DO) has been introduced by Robert Kahn in the early 1990s. Here are some examples of projects around the world that are working to implement infrstructuers and services based on FDO."},{"title":"Home","url":"/","tags":[],"body":"Turning Data to Knowledge Learn more Working Groups Learn about the various working groups. Publications Publications related to the FAIR Digital Object concept. Examples See FAIR Digital Objects in action. About More about FAIR Digital Objects. Upcoming events and News June 21, 2021 FAIR Festival 2021 FAIR Festival 2021: Advancing Data Science March 15, 2021 Call for papers Call for Papers on Canonical Workflow Frameworks for Research About The FAIR Digital Object is a Digital Object (DO) (DO as defined by Robert Kahn in the early 1990s) that brings together the idea of interoperable digital objects and FAIR principles together. FAIR Digital Objects can represent data, software, protocols or other research resources. They are accompanied by persistent identifiers (PID) and metadata rich enough to enable them to be reliably found, used and cited (FAIR Implementation Report, Wittenburg & Strawn 2019). Subscribe to our mailing list Learn about upcoming events related to FAIR Digital Objects. Subscribe"},{"title":"Publications","url":"/publications/","tags":[],"body":"2021 Wittenburg, P., 2021. Open science and data science. Data Intelligence, pp.1-11. DOI 2020 De Smedt, K., Koureas, D. and Wittenburg, P., 2020. FAIR digital objects for science: from data pieces to actionable knowledge units. Publications, 8(2), p.21. DOI Islam, S., Hardisty, A., Addink, W., Weiland, C. and Glöckler, F., 2020. Incorporating RDA Outputs in the Design of a European Research Infrastructure for Natural Science Collections. Data Science Journal, 19(1). DOI National Institute of Standards and Technology, United States Department of Commerce. August 2020. Facilitating the Adoption of the FAIR Digital Object Framework in Material Science. URL Schwardmann, U., 2020. Digital Objects–FAIR Digital Objects: Which Services Are Required?. Data Science Journal, 19(1). DOI 2019 Strawn, G., 2019, July. Open Science, Business Analytics, and FAIR Digital Objects. In 2019 IEEE 43rd Annual Computer Software and Applications Conference (COMPSAC) (Vol. 2, pp. 658-663). IEEE. DOI Wittenburg, P, et al. 2019. Digital objects as drivers towards convergence in data infrastructures. Technical paper. DOI Wittenburg, P., 2019. Large Research Infrastructure Building using FAIR Digital Objects. Autumn 2019 euroCRIS Strategic Membership Meeting. DOI 2018 Schultes, E. and Wittenburg, P., 2018, October. FAIR Principles and Digital Objects: Accelerating convergence on a data infrastructure. In International Conference on Data Analytics and Management in Data Intensive Domains (pp. 3-16). Springer, Cham. DOI 2016 Sharp, C. 2016. Overview of the digital object architecture (DOA). An Internet Society Information Paper, Internet Society. URL 2006 Kahn, R and Wilensky, R, 2006. A framework for distributed digital object services. International Journal on Digital Libraries, 6(2): 115–123. DOI"},{"title":"Working Groups","url":"/wg/big/","tags":[],"body":"FDO-BIG Basic Infrastructure Group A fully functioning FDO landscape is dependent on a well-organised and operational infrastructure of basic components that can be used by every researcher at the end. Questions?"},{"title":"Working Groups","url":"/wg/eING/","tags":[],"body":"FDO-eING eInfrastructure Group This group will focus on the interaction and involvement of the big data and computing centres in the FDO related work. These big data centres have an even more important role in the future since they need to take care of persistent services that go beyond their traditional business in providing basic networking, storage and computing services. If FDO as basic interoperability infrastructure wants to be accepted, they need to support essential registries of all sorts (PIDs, Types, Assertions, etc.) in a persistent and 24/7 availability mode."},{"title":"Working Groups","url":"/wg/","tags":[],"body":"Current working groups endorsed by the steering commitee 1.FDO-eING eInfrastructure Group 2.FDO-BIG Basic Infrastructure Group Questions?"}]}